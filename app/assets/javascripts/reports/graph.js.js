// Generated by CoffeeScript 2.5.1
(function() {
  window.reportRenderers || (window.reportRenderers = {});

  reportRenderers.graph = function(report, data) {
    var agg, col, color, columns, dataColumns, filterLine, height, i, last_point, line, margin, name, parseDate, parseVal, parsedDates, row, series, svg, width, x, xAxis, y, yAxis;
    columns = (function() {
      var j, len, ref, results;
      ref = data.column_names;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        name = ref[i];
        results.push({
          index: i,
          name: name
        });
      }
      return results;
    })();
    dataColumns = columns.slice(1);
    parseDate = d3.time.format('%Y-%m-%d').parse;
    parsedDates = (function() {
      var j, len, ref, results;
      ref = data.rows;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        row = ref[j];
        results.push(parseDate(row[0]));
      }
      return results;
    })();
    parseVal = function(v) {
      v = +v;
      if (isNaN(v)) {
        return null;
      } else {
        return v;
      }
    };
    margin = {
      top: 20,
      bottom: 30,
      left: 50,
      right: 80
    };
    width = 960 - margin.left - margin.right;
    height = 500 - margin.top - margin.bottom;
    // Set up some D3 things
    x = d3.time.scale().range([0, width]);
    y = d3.scale.linear().range([height, 0]);
    color = d3.scale.category10();
    xAxis = d3.svg.axis().scale(x).orient('bottom');
    yAxis = d3.svg.axis().scale(y).orient('left');
    line = d3.svg.line().interpolate('basis').x(function(d) {
      return x(d.week);
    }).y(function(d) {
      return y(d.value);
    });
    svg = d3.select(report).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);
    // Draw it!
    color.domain((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = dataColumns.length; j < len; j++) {
        col = dataColumns[j];
        results.push(col.index);
      }
      return results;
    })());
    x.domain(d3.extent(parsedDates));
    y.domain((function() {
      var j, len, ref, results;
      ref = [d3.min, d3.max];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        agg = ref[j];
        results.push(agg(data.rows, function(row) {
          return agg(row.slice(1), parseVal);
        }));
      }
      return results;
    })());
    svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);
    svg.append("g").attr("class", "y axis").call(yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end");
    series = svg.selectAll('.series').data(dataColumns).enter().append('g').attr('class', 'series');
    filterLine = function(column) {
      var j, len, ref, results;
      ref = data.rows;
      results = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        row = ref[i];
        if (row[column.index]) {
          results.push({
            week: parsedDates[i],
            value: parseVal(row[column.index])
          });
        }
      }
      return results;
    };
    series.append('path').attr('class', 'line').attr('d', function(d) {
      return line(filterLine(d));
    }).style('stroke', function(d) {
      return color(d.index);
    });
    last_point = function(column) {
      var j, len, ref;
      ref = data.rows;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        row = ref[i];
        if (parseVal(row[column.index])) {
          return {
            week: parsedDates[i],
            value: parseVal(row[column.index])
          };
        }
      }
      return {
        week: d3.max(parsedDates),
        value: 0
      };
    };
    return series.append('text').datum(function(d) {
      return {
        name: d.name,
        value: last_point(d),
        color: color(d.index)
      };
    }).attr('transform', function(d) {
      return `translate(${x(d.value.week)}, ${y(d.value.value)})`;
    }).attr('x', 3).attr('dy', '.35em').attr('stroke', function(d) {
      return d.color;
    }).text(function(d) {
      return d.name;
    });
  };

}).call(this);
